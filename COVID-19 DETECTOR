{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"COVID-19 DETECTOR","provenance":[],"collapsed_sections":[],"mount_file_id":"1ST8yb7pEu0cSD67kETR5O2gXALXCmcLY","authorship_tag":"ABX9TyNrnKpgZhxuxWCllNNMZ2n4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"MNl--nE_MulR","executionInfo":{"status":"error","timestamp":1627228238247,"user_tz":-330,"elapsed":1522,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"a0cc2273-ba8d-476f-f3f3-5a9b2417b445"},"source":["\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-35dbefa8c3a3>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    TRAIN_PATH = \"CovidDataset/Train\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}]},{"cell_type":"code","metadata":{"id":"0aBbpHFFXGUc","executionInfo":{"status":"ok","timestamp":1627582141049,"user_tz":-330,"elapsed":748,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}}},"source":["TRAIN_PATH = \"CovidDataset/Train\" \n","VAL_PATH = \"CovidDataset/Val\""],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"9FvmrvvIXM9A","executionInfo":{"status":"ok","timestamp":1627582147509,"user_tz":-330,"elapsed":2927,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import keras\n","from keras.layers import *\n","from keras.models import *\n","from keras.models import Sequential\n","from keras.preprocessing import image "],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"jf95H_VIX0S_","executionInfo":{"status":"ok","timestamp":1627582150402,"user_tz":-330,"elapsed":1493,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}}},"source":["#CNN Based model in keras\n","\n","model = Sequential()\n","model.add(Conv2D(32, kernel_size= (3,3), activation = 'relu', input_shape = (224,224,3 )))\n","model.add(Conv2D(64,(3,3),activation = 'relu'))\n","model.add(MaxPooling2D(pool_size = (2,2)))  \n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(64,(3,3), activation = 'relu'))\n","model.add(MaxPooling2D(pool_size = (2,2)))  \n","model.add(Dropout(0.25))\n","\n","model.add(Conv2D(128,(3,3), activation = 'relu'))\n","model.add(MaxPooling2D(pool_size = (2,2)))  \n","model.add(Dropout(0.25))\n","\n","model.add(Flatten())\n","model.add(Dense(64, activation = 'relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(1,activation = 'sigmoid'))\n","\n","model.compile(loss=keras.losses.binary_crossentropy, optimizer = 'adam', metrics=['accuracy'])\n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DexwnU6bCqN2","executionInfo":{"status":"ok","timestamp":1627582153856,"user_tz":-330,"elapsed":4,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"91a3ed2c-4a1c-4270-afef-fd731511afe0"},"source":["model.summary() "],"execution_count":5,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 222, 222, 32)      896       \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 220, 220, 64)      18496     \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 110, 110, 64)      0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 110, 110, 64)      0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 108, 108, 64)      36928     \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 54, 54, 64)        0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 54, 54, 64)        0         \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 52, 52, 128)       73856     \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 26, 26, 128)       0         \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 26, 26, 128)       0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 86528)             0         \n","_________________________________________________________________\n","dense (Dense)                (None, 64)                5537856   \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 64)                0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 65        \n","=================================================================\n","Total params: 5,668,097\n","Trainable params: 5,668,097\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JlWJMtYaJpKt","executionInfo":{"status":"ok","timestamp":1627582158192,"user_tz":-330,"elapsed":11,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}}},"source":["#Training from scratch \n","\n","train_datagen = image.ImageDataGenerator(\n","    rescale = 1./255,\n","    shear_range = 0.2,\n","    zoom_range = 0.2,\n","    horizontal_flip = True,\n",")\n","\n","test_dataset = image.ImageDataGenerator(rescale = 1./255)\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d5hfLUrALEXZ","executionInfo":{"status":"ok","timestamp":1627582162931,"user_tz":-330,"elapsed":1052,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"81646489-ac88-424c-9bd8-3ad301c3d5ca"},"source":["train_generator = train_datagen.flow_from_directory(\n","    'drive/MyDrive/CovidDataset/Train',\n","    target_size = (224,224),\n","    batch_size = 32,\n","    class_mode = 'binary')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Found 220 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6kK9jFkBLzk3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627582165133,"user_tz":-330,"elapsed":422,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"589343d8-0926-494e-b676-b7a5e7772ad2"},"source":["train_generator.class_indices "],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Covid': 0, 'Normal': 1}"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"stqS5u9iGKb0","executionInfo":{"status":"ok","timestamp":1627582167634,"user_tz":-330,"elapsed":607,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"f05078b5-8c91-4df3-f4d1-750dcaa551aa"},"source":["validation_generator = test_dataset.flow_from_directory(\n","   'drive/MyDrive/CovidDataset/Train',\n","    target_size = (224,224),\n","    batch_size = 32,\n","    class_mode = 'binary'  \n",")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Found 220 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xs4uJDMGLmh0","executionInfo":{"status":"ok","timestamp":1627582468556,"user_tz":-330,"elapsed":59883,"user":{"displayName":"Arnav Mohan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggniu6ftNtRIYpTJCORB3yO3w6o48xQEgvziRBNhg=s64","userId":"08630059606952128649"}},"outputId":"4b65770e-a934-4b21-a5d9-4fa620f85f3c"},"source":["hist = model.fit_generator(\n","    train_generator,\n","    steps_per_epoch = 8,\n","    epochs = 10,\n","    validation_data = validation_generator,\n","    validation_steps = 2\n",")"],"execution_count":11,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training.py:1915: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/10\n","7/8 [=========================>....] - ETA: 7s - loss: 0.6617 - accuracy: 0.6091 WARNING:tensorflow:Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches (in this case, 80 batches). You may need to use the repeat() function when building your dataset.\n","8/8 [==============================] - 58s 7s/step - loss: 0.6617 - accuracy: 0.6091 - val_loss: 0.6357 - val_accuracy: 0.7656\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zxevwlnwMzBx"},"source":[""],"execution_count":null,"outputs":[]}]}